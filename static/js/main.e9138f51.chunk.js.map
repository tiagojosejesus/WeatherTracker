{"version":3,"sources":["components/Form/Form.js","components/Weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputCity","setInputCity","inputDays","setInputDays","inputValues","setInputValues","setWeatherData","weatherData","submitHandler","event","a","preventDefault","city","days","url","fetch","response","json","data","loading","className","onChange","target","value","type","placeholder","onClick","Weather","console","log","map","weather","forecast","forecastday","src","day","condition","icon","alt","date","mintemp_c","maxtemp_c","daily_chance_of_rain","totalprecip_mm","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9138f51.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Form.scss\";\r\n\r\nconst Form = ({\r\n  inputCity,\r\n  setInputCity,\r\n  inputDays,\r\n  setInputDays,\r\n  inputValues,\r\n  setInputValues,\r\n  weatherData,\r\n  setWeatherData,\r\n}) => {\r\n  const onInputHandler = (event) => {\r\n    setInputCity(event.target.value);\r\n  };\r\n  const daysHandler = (event) => {\r\n    setInputDays(event.target.value);\r\n  };\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setInputValues([...inputValues, { city: inputCity, days: inputDays }]);\r\n    const url =\r\n      \"http://api.weatherapi.com/v1/forecast.json?key=971d4690217947ebb98152934201312&q=\" +\r\n      inputCity +\r\n      \"&days=\" +\r\n      inputDays;\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    setWeatherData([{ data: data, loading: false }]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchBar\">\r\n      <form className=\"search\">\r\n        <input\r\n          onChange={onInputHandler}\r\n          type=\"text\"\r\n          value={inputCity}\r\n          placeholder=\"City\"\r\n        />\r\n        <select className=\"selector\" onChange={daysHandler}>\r\n          <option>1 day</option>\r\n          <option>2 days</option>\r\n          <option>3 days</option>\r\n        </select>\r\n        <button className=\"submitButton\" onClick={submitHandler} type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Weather.scss\";\r\n\r\nconst Weather = ({ weatherData }) => {\r\n  console.log(weatherData);\r\n  return (\r\n    <div className=\"container\">\r\n      {weatherData.map((weather) => (\r\n        <>\r\n          {weather.loading || !weather.data ? (\r\n            <></>\r\n          ) : (\r\n            <>\r\n              <div>\r\n                {weather.data.forecast.forecastday.map((days) => (\r\n                  <div className=\"weather-container\">\r\n                    <img src={days.day.condition.icon} alt=\"\"></img>\r\n                    <div className=\"date\">Date: {days.date}</div>\r\n                    <div className=\"info\">\r\n                      Minimum Temperature: {days.day.mintemp_c} ºC\r\n                    </div>\r\n                    <div className=\"info\">\r\n                      Maximum Temperature: {days.day.maxtemp_c} ºC\r\n                    </div>\r\n                    <div className=\"info\">\r\n                      Chance of Rain: {days.day.daily_chance_of_rain} %\r\n                    </div>\r\n                    <div className=\"info\">\r\n                      Precipitation: {days.day.totalprecip_mm} mm\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <div>\r\n                {weather.data.forecast.forecastday.map((days) => (\r\n                  <div className=\"weather-container\">\r\n                    <img src={days.day.condition.icon} alt=\"\"></img>\r\n                    <div className=\"date\">Date: {days.date}</div>\r\n                    <div className=\"info\">\r\n                      Minimum Temperature: {days.day.mintemp_c} ºC\r\n                    </div>\r\n                    <div className=\"info\">\r\n                      Maximum Temperature: {days.day.maxtemp_c} ºC\r\n                    </div>\r\n                    <div className=\"info\">\r\n                      Chance of Rain: {days.day.daily_chance_of_rain} %\r\n                    </div>\r\n                    <div className=\"info\">\r\n                      Precipitation: {days.day.totalprecip_mm} mm\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.scss\";\r\nimport Form from \"./components/Form/Form\";\r\nimport Weather from \"./components/Weather/Weather\";\r\n\r\nfunction App() {\r\n  const [inputCity, setInputCity] = useState(\"\");\r\n  const [inputDays, setInputDays] = useState(\"\");\r\n  const [inputValues, setInputValues] = useState([]);\r\n  const [weatherData, setWeatherData] = useState([\r\n    { data: null, loading: true },\r\n  ]);\r\n  return (\r\n    <div className=\"App\">\r\n      <Form\r\n        inputCity={inputCity}\r\n        setInputCity={setInputCity}\r\n        inputDays={inputDays}\r\n        setInputDays={setInputDays}\r\n        inputValues={inputValues}\r\n        setInputValues={setInputValues}\r\n        weatherData={weatherData}\r\n        setWeatherData={setWeatherData}\r\n      />\r\n      <Weather weatherData={weatherData} setWeatherData={setWeatherData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}